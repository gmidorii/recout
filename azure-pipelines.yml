
trigger:
- master

variables:
  GOPATH: '$(system.defaultWorkingDirectory)/gopath'

stages:
- stage: build
  jobs:
  - job: front
    pool:
      vmImage: 'ubuntu-latest'

    steps:
    - task: NodeTool@0
      inputs:
        versionSpec: '10.x'
      displayName: 'Install Node.js'

    - script: |
        cd ./front
        npm install
        # npm test
      displayName: 'npm install and test'

    - script: |
        cd ./front
        echo $FIREBASE_CONFIG > ./firebase.config.ts
        npx nuxt generate
        rm ./firebase.config.ts
      env:
        FIREBASE_CONFIG: $(FIREBASE_CONFIG)
      displayName: 'generate prod code'

  - job: backend
    pool:
      vmImage: 'ubuntu-latest'
    
    steps:

    - script: |
        cd ./backend
        go build
      displayName: 'go build'
    
    - script: |
        cd ./backend
        make test
      displayName: 'go test'

- stage: deploy
  # exec only master branch
  condition: and(succeeded(), eq(variables['build.sourceBranch'], 'refs/heads/master'))
  jobs:
  - job: app_engine_deploy
    pool:
      vmImage: 'ubuntu-latest'
    
    steps:
    - task: NodeTool@0
      inputs:
        versionSpec: '10.x'
      displayName: 'Install Node.js'

    - script: |
        # front
        cd ./front
        echo $FIREBASE_CONFIG > ./firebase.config.ts
        npm install
        NODE_ENV=production RECOUT_URL='/v1' npx nuxt generate

        # backend
        cd ../backend
        make ciinit
        make pack

        echo $DEPLOY_KEY_FILE_PRODUCTION > /tmp/credential.json
        docker pull google/cloud-sdk:${GCLOUD_VERSION}
        docker run -v /tmp:/tmp \
          --name gcloud-config google/cloud-sdk:${GCLOUD_VERSION} \
          gcloud auth activate-service-account --key-file /tmp/credential.json

        # XXX: cannot create yaml secret file from env variable.
        echo "
        env_variables:
          DATASTORE_PROJECT_ID: ${PROJECT_ID_PRODUCTION}
        " > ./secret.yml

        docker run -v $(pwd):/tmp/recout/backend \
          --volumes-from gcloud-config \
          google/cloud-sdk:252.0.0-alpine \
          gcloud --quiet --project $PROJECT_ID_PRODUCTION app deploy /tmp/recout/backend/app.yaml

        # clean
        docker container rm -v gcloud-config
        rm /tmp/credential.json
        rm ./secret.yml
      env:
        FIREBASE_CONFIG: $(FIREBASE_CONFIG)
        DEPLOY_KEY_FILE_PRODUCTION: $(DEPLOY_KEY_FILE_PRODUCTION)
        PROJECT_ID_PRODUCTION: $(PROJECT_ID_PRODUCTION)
        GCLOUD_VERSION: 252.0.0-alpine

      displayName: 'deploy'
