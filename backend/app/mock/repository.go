// Code generated by MockGen. DO NOT EDIT.
// Source: ./infra/repository/abstract.go

// Package mock is a generated GoMock package.
package mock

import (
	context "context"
	entity "github.com/gmidorii/recout/backend/infra/entity"
	gomock "github.com/golang/mock/gomock"
	reflect "reflect"
)

// MockRecout is a mock of Recout interface
type MockRecout struct {
	ctrl     *gomock.Controller
	recorder *MockRecoutMockRecorder
}

// MockRecoutMockRecorder is the mock recorder for MockRecout
type MockRecoutMockRecorder struct {
	mock *MockRecout
}

// NewMockRecout creates a new mock instance
func NewMockRecout(ctrl *gomock.Controller) *MockRecout {
	mock := &MockRecout{ctrl: ctrl}
	mock.recorder = &MockRecoutMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use
func (m *MockRecout) EXPECT() *MockRecoutMockRecorder {
	return m.recorder
}

// Put mocks base method
func (m *MockRecout) Put(ctx context.Context, e entity.Recout) (string, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Put", ctx, e)
	ret0, _ := ret[0].(string)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Put indicates an expected call of Put
func (mr *MockRecoutMockRecorder) Put(ctx, e interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Put", reflect.TypeOf((*MockRecout)(nil).Put), ctx, e)
}

// Fetch mocks base method
func (m *MockRecout) Fetch(ctx context.Context, accountID string, offset, limit int) ([]entity.Recout, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Fetch", ctx, accountID, offset, limit)
	ret0, _ := ret[0].([]entity.Recout)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Fetch indicates an expected call of Fetch
func (mr *MockRecoutMockRecorder) Fetch(ctx, accountID, offset, limit interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Fetch", reflect.TypeOf((*MockRecout)(nil).Fetch), ctx, accountID, offset, limit)
}

// MockUser is a mock of User interface
type MockUser struct {
	ctrl     *gomock.Controller
	recorder *MockUserMockRecorder
}

// MockUserMockRecorder is the mock recorder for MockUser
type MockUserMockRecorder struct {
	mock *MockUser
}

// NewMockUser creates a new mock instance
func NewMockUser(ctrl *gomock.Controller) *MockUser {
	mock := &MockUser{ctrl: ctrl}
	mock.recorder = &MockUserMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use
func (m *MockUser) EXPECT() *MockUserMockRecorder {
	return m.recorder
}

// Put mocks base method
func (m *MockUser) Put(ctx context.Context, e entity.User) (string, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Put", ctx, e)
	ret0, _ := ret[0].(string)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Put indicates an expected call of Put
func (mr *MockUserMockRecorder) Put(ctx, e interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Put", reflect.TypeOf((*MockUser)(nil).Put), ctx, e)
}

// Get mocks base method
func (m *MockUser) Get(ctx context.Context, accountID string) (entity.User, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Get", ctx, accountID)
	ret0, _ := ret[0].(entity.User)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Get indicates an expected call of Get
func (mr *MockUserMockRecorder) Get(ctx, accountID interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Get", reflect.TypeOf((*MockUser)(nil).Get), ctx, accountID)
}

// Fetch mocks base method
func (m *MockUser) Fetch(ctx context.Context, offset, limit int) ([]entity.User, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Fetch", ctx, offset, limit)
	ret0, _ := ret[0].([]entity.User)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Fetch indicates an expected call of Fetch
func (mr *MockUserMockRecorder) Fetch(ctx, offset, limit interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Fetch", reflect.TypeOf((*MockUser)(nil).Fetch), ctx, offset, limit)
}

// MockContinues is a mock of Continues interface
type MockContinues struct {
	ctrl     *gomock.Controller
	recorder *MockContinuesMockRecorder
}

// MockContinuesMockRecorder is the mock recorder for MockContinues
type MockContinuesMockRecorder struct {
	mock *MockContinues
}

// NewMockContinues creates a new mock instance
func NewMockContinues(ctrl *gomock.Controller) *MockContinues {
	mock := &MockContinues{ctrl: ctrl}
	mock.recorder = &MockContinuesMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use
func (m *MockContinues) EXPECT() *MockContinuesMockRecorder {
	return m.recorder
}

// Put mocks base method
func (m *MockContinues) Put(ctx context.Context, e entity.Continues) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Put", ctx, e)
	ret0, _ := ret[0].(error)
	return ret0
}

// Put indicates an expected call of Put
func (mr *MockContinuesMockRecorder) Put(ctx, e interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Put", reflect.TypeOf((*MockContinues)(nil).Put), ctx, e)
}

// PutKey mocks base method
func (m *MockContinues) PutKey(ctx context.Context, key string, e entity.Continues) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "PutKey", ctx, key, e)
	ret0, _ := ret[0].(error)
	return ret0
}

// PutKey indicates an expected call of PutKey
func (mr *MockContinuesMockRecorder) PutKey(ctx, key, e interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "PutKey", reflect.TypeOf((*MockContinues)(nil).PutKey), ctx, key, e)
}

// Get mocks base method
func (m *MockContinues) Get(ctx context.Context, accountID string) (string, entity.Continues, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Get", ctx, accountID)
	ret0, _ := ret[0].(string)
	ret1, _ := ret[1].(entity.Continues)
	ret2, _ := ret[2].(error)
	return ret0, ret1, ret2
}

// Get indicates an expected call of Get
func (mr *MockContinuesMockRecorder) Get(ctx, accountID interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Get", reflect.TypeOf((*MockContinues)(nil).Get), ctx, accountID)
}
