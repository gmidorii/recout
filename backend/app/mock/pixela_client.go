// Code generated by MockGen. DO NOT EDIT.
// Source: ./infra/pixela/client.go

// Package mock is a generated GoMock package.
package mock

import (
	pixela "github.com/gmidorii/recout/backend/infra/pixela"
	gomock "github.com/golang/mock/gomock"
	reflect "reflect"
)

// MockClient is a mock of Client interface
type MockClient struct {
	ctrl     *gomock.Controller
	recorder *MockClientMockRecorder
}

// MockClientMockRecorder is the mock recorder for MockClient
type MockClientMockRecorder struct {
	mock *MockClient
}

// NewMockClient creates a new mock instance
func NewMockClient(ctrl *gomock.Controller) *MockClient {
	mock := &MockClient{ctrl: ctrl}
	mock.recorder = &MockClientMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use
func (m *MockClient) EXPECT() *MockClientMockRecorder {
	return m.recorder
}

// Increment mocks base method
func (m *MockClient) Increment(userID, token, graph string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Increment", userID, token, graph)
	ret0, _ := ret[0].(error)
	return ret0
}

// Increment indicates an expected call of Increment
func (mr *MockClientMockRecorder) Increment(userID, token, graph interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Increment", reflect.TypeOf((*MockClient)(nil).Increment), userID, token, graph)
}

// CreateUser mocks base method
func (m *MockClient) CreateUser(user pixela.User) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateUser", user)
	ret0, _ := ret[0].(error)
	return ret0
}

// CreateUser indicates an expected call of CreateUser
func (mr *MockClientMockRecorder) CreateUser(user interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateUser", reflect.TypeOf((*MockClient)(nil).CreateUser), user)
}

// CreateGraph mocks base method
func (m *MockClient) CreateGraph(id, graph, name, token string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateGraph", id, graph, name, token)
	ret0, _ := ret[0].(error)
	return ret0
}

// CreateGraph indicates an expected call of CreateGraph
func (mr *MockClientMockRecorder) CreateGraph(id, graph, name, token interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateGraph", reflect.TypeOf((*MockClient)(nil).CreateGraph), id, graph, name, token)
}

// DeleteUser mocks base method
func (m *MockClient) DeleteUser(name, token string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeleteUser", name, token)
	ret0, _ := ret[0].(error)
	return ret0
}

// DeleteUser indicates an expected call of DeleteUser
func (mr *MockClientMockRecorder) DeleteUser(name, token interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteUser", reflect.TypeOf((*MockClient)(nil).DeleteUser), name, token)
}
